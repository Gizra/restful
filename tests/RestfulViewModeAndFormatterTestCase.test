<?php

/**
 * @file
 * Contains RestfulViewModeFormatterTestCase
 */

class RestfulViewModeAndFormatterTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'View mode and formatter',
      'description' => 'Test the integration with entity view mode and field API formatters.',
      'group' => 'Restful',
    );
  }

  function setUp() {
    parent::setUp('restful_example');
  }

  /**
   * Test the view mode integration.
   */
  public function testViewModeIntegration() {
    $handler = restful_get_restful_handler('articles', 1, 7);
    $nodes[] = $this->createNodeWithTags();
    $nodes[] = $this->createNodeWithTags();
    // Make sure to get more than one node to increase coverage on
    // \RestfulEntityViewMode.
    $results = $handler->get($nodes[0]->nid . ',' . $nodes[1]->nid);

    // Make sure that all the fields were mapped.
    $this->assertNotNull($results[0]['body']);
    $this->assertFalse(empty($results[0]['body']), 'Body is not empty.');
    $this->assertNotNull($results[0]['tags']);
    $this->assertFalse(empty($results[0]['tags']), 'Tags are not empty.');
    $this->assertNotNull($results[0]['image']);
  }

  /**
   * Test the field API formatter integration.
   */
  public function testFormatterIntegration() {
    $handler = restful_get_restful_handler('articles', 1, 5);

    // Create node.
    $text = 'Some body with long text';
    $settings = array(
      'type' => 'article',
      'body' => array(
        LANGUAGE_NONE => array(
          array('value' => $text),
        )
      ),
    );
    $node = $this->drupalCreateNode($settings);

    // Field with no formatter.
    $result = $handler->get($node->nid);
    $this->assertEqual($result[0]['body'], $text);

    // Add formatter settings. We use the settings from the "default" view mode
    // and adjust them..
    $instance = field_info_instance('node', 'body', 'article');
    $display = $instance['display'];
    $display['settings']['trim_length'] = 5;
    $public_fields = $handler->getPublicFields();
    $public_fields['body']['formatter'] = $instance['display'];
    $handler->setPublicFields($public_fields);

    $result = $handler->get($node->nid);
    $this->assertEqual($result[0]['body'], $text);
  }
}
