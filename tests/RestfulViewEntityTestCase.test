<?php

/**
 * @file
 * Contains RestfulViewEntityTestCase
 */

class RestfulViewEntityTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'View entity',
      'description' => 'Test the viewing of an entity.',
      'group' => 'Restful',
    );
  }

  function setUp() {
    parent::setUp('restful_example', 'restful_test', 'entityreference');

    restful_test_add_fields();
  }

  /**
   * Test viewing an entity (GET method).
   *
   * v1.0 - Simple entity view (id, label, self).
   * v1.1 - Text and entity reference fields.
   * v1.2 - "callback" and "process callback".
   * v1.3 - Non-existing "callback" property.
   * v1.4 - Non-existing "process callback" property.
   */
  function testViewEntity() {
    $user1 = $this->drupalCreateUser();
    $entity1 = entity_create('entity_test', array('name' => 'main', 'uid' => $user1->uid));
    $entity1->save();

    $entity2 = entity_create('entity_test', array('name' => 'main', 'uid' => $user1->uid));
    $entity2->save();

    $entity3 = entity_create('entity_test', array('name' => 'main', 'uid' => $user1->uid));
    $wrapper = entity_metadata_wrapper('entity_test', $entity3);

    $text1 = $this->randomName();
    $text2 = $this->randomName();


    $wrapper->text_single->set($text1);
    $wrapper->text_multiple->set(array($text1, $text2));

    $wrapper->entity_reference_single->set($entity1);
    $wrapper->entity_reference_multiple[] = $entity1;
    $wrapper->entity_reference_multiple[] = $entity2;

    $wrapper->save();

    $id = $entity3->pid;

    $base_expected_result = array(
      'id' => $id,
      'label' => 'Main test type',
      'self' => url('custom/' . $id, array('absolute' => TRUE)),
    );

    // v1.0 - Simple entity view (id, label, self).
    $handler = restful_get_restful_handler('main', 1, 0);
    $expected_result = $base_expected_result;

    $response = $handler->get($id);
    $result = $response['data'];
    $this->assertEqual($result, $expected_result, 'Entity view has expected result for "main" resource v1');

    // v1.1 - Text and entity reference field.
    $handler = restful_get_restful_handler('main', 1, 1);
    $response = $handler->get($id);
    $result = $response['data'];

    $base_expected_result_v1 = $base_expected_result;

    // NULL fields.
    $base_expected_result_v1 += array(
      'text_single_processing' => NULL,
      'text_multiple_processing' => NULL,
      'term_single' => NULL,
      'term_multiple' => NULL,
      'file_single' => NULL,
      'file_multiple' => NULL,
      'image_single' => NULL,
      'image_multiple' => NULL,
    );

    $expected_result = $base_expected_result_v1;
    $expected_result['text_single'] = $text1;
    $expected_result['text_multiple'] = array($text1, $text2);
    $expected_result['entity_reference_single'] = $entity1->pid;
    $expected_result['entity_reference_multiple'] = array(
      $entity1->pid,
      $entity2->pid,
    );

    $response = $handler->get($entity1->pid);
    $expected_result['entity_reference_single_resource'] = $response['data'];
    $response1 = $handler->get($entity1->pid);
    $response2 = $handler->get($entity2->pid);
    $expected_result['entity_reference_multiple_resource'] = array(
      $response1['data'],
      $response2['data'],
    );

    $stripped_result = $result;
    $stripped_result['text_single'] = trim(strip_tags($result['text_single']));
    $stripped_result['text_multiple'][0] = trim(strip_tags($result['text_multiple'][0]));
    $stripped_result['text_multiple'][1] = trim(strip_tags($result['text_multiple'][1]));

    ksort($stripped_result);
    ksort($expected_result);
    $this->assertEqual($stripped_result, $expected_result, 'Entity view has correct result for "main" resource v1.1');

    // Empty the text and entity reference fields.
    $wrapper->text_single->set(NULL);
    $wrapper->text_multiple->set(NULL);
    $wrapper->entity_reference_single->set(NULL);
    $wrapper->entity_reference_multiple->set(NULL);
    $wrapper->save();

    $response = $handler->get($id);
    $result = $response['data'];
    $expected_result = $base_expected_result_v1;
    $expected_result['text_single'] = NULL;
    $expected_result['text_multiple'] = NULL;
    $expected_result['text_single'] = NULL;
    $expected_result['text_multiple'] = NULL;
    $expected_result['entity_reference_single'] = NULL;
    $expected_result['entity_reference_multiple'] = NULL;
    $expected_result['entity_reference_single_resource'] = NULL;
    $expected_result['entity_reference_multiple_resource'] = NULL;

    ksort($result);
    ksort($expected_result);
    $this->assertEqual($result, $expected_result, 'Entity view has correct result for "main" resource v1.1 with empty entity reference.');

    // v1.2 - "callback" and "process callback".
    $handler = restful_get_restful_handler('main', 1, 2);
    $response = $handler->get($id);
    $result = $response['data'];
    $expected_result = $base_expected_result;
    $expected_result['callback'] = 'callback';
    $expected_result['process_callback_from_callback'] = 'callback processed from callback';
    $expected_result['process_callback_from_value'] = $id . ' processed from value';
    $this->assertEqual($result, $expected_result, 'Entity view has correct result for "main" resource v1.2');

    // v1.3 - Non-existing "callback" property.
    $handler = restful_get_restful_handler('main', 1, 3);
    try {
      $handler->get($id);
      $this->fail('Non-existing "callback" property did not trigger an exception.');
    }
    catch(Exception $e) {
      $this->pass('Non-existing "callback" property triggered an exception.');
    }

    // v1.4 - Non-existing "process callback" property.
    $handler = restful_get_restful_handler('main', 1, 4);
    try {
      $handler->get($id);
      $this->fail('Non-existing "process callback" property did not trigger an exception.');
    }
    catch(Exception $e) {
      $this->pass('Non-existing "process callback" property triggered an exception.');
    }
  }
}
