<?php

/**
 * @file
 * Contains RestfulDbQueryTestCase.
 */

class RestfulVariableTestCase extends DrupalWebTestCase {

  /**
   * The name of the test table.
   *
   * @var string
   */
  protected $tableName = 'restful_test_variable';

  /**
   * Provides information about the test class.
   */
  public static function getInfo() {
    return array(
      'name' => 'Variable',
      'description' => 'Test the variable data provider.',
      'group' => 'Restful',
    );
  }

  /**
   * Operations before the testing begins.
   */
  function setUp() {
    parent::setUp('restful_example');
  }

  /**
   * Test authenticating a user.
   */
  function testCrudOperations() {
    // Populate the table with some variables.
    for ($i = 0; $i < 6; $i++) {
      variable_set('variable_' . $i, array('test_data' => intval(mt_rand(1, 100))));
    }

    $this->assertTrue(variable_get('variable_5'), 'The variables have been set.');

    // Get the handler.
    $handler = restful_get_restful_handler('variables');

    // Testing read
    $results = $handler->get('variable_5');
    $result = $results[0];
    $this->assertEqual($result['variable_name'], 'variable_5', 'The variable name was successfully retrieved.');
    $this->assertNotNull($result['variable_value'], 'The variable value was successfully retrieved.');

    // Testing list.
    $results = $handler->get();
    $inResults = FALSE;
    foreach ($results as $result) {
      if ($result['variable_name'] == 'variable_5') {
        $inResults = TRUE;
      }
    }
    $this->assertTrue($inResults, 'All the content listed successfully.');

    // Testing sort.
    variable_set('zzz', array('some_property' => $this->randomName()));
    $request = array(
      'sort' => '-variable_name',
    );
    $results = $handler->get('', $request);
    $this->assertEqual($results[0]['variable_name'], 'zzz', 'List is sorted correctly.');

    // Testing create.
    $request = array(
      'variable_name' => 'created_variable',
      'variable_value' => $this->randomName(),
    );
    $handler->post('', $request);
    $results = $handler->get('created_variable');
    $initial_value = $results[0]['variable_value'];
    $this->assertEqual($results[0]['variable_name'], 'created_variable', 'The variable was created.');
    $this->assertTrue($initial_value, 'The created variable value is present.');

    // Testing update.
    $request['variable_value'] = $this->randomName();
    $handler->put('created_variable', $request);
    $updated_value = variable_get('created_variable');
    $this->assertNotEqual($initial_value, $updated_value, 'The variable value was updated.');

    // Testing delete.
    $handler->delete('created_variable');
    $deleted = !variable_get('created_variable');
    $this->assertTrue($deleted);
  }

  /**
   * Test the render cache.
   */
  public function testRenderCache() {
    // Create a test variable.
    $handler = restful_get_restful_handler('variables');

    $request = array(
      'variable_name' => 'test_variable_cache',
      'variable_value' => TRUE,
    );
    $handler->post('', $request);
    $created = variable_get('test_variable_cache');
    $this->assertNotNull($created, 'The cache variable has been created.');

    // Populate the cache entries.
    $account = $this->drupalCreateUser();
    $handler->setAccount($account);
    $handler->get('test_variable_cache');

    // Get the cache value.
    $cache = $handler->getCacheController();
    $version = $handler->getVersion();
    $cid = 'v'. $version['major'] . '.' . $version['minor'] . '::variables::uu' . $account->uid . '::patb:variable::id:' . 'test_variable_cache';
    $cache_data = $cache->get($cid);

    $this->assertNotNull($cache_data->data, 'Cache data is present.');
    $this->assertEqual($cache_data->data['variable_name'], 'test_variable_cache', 'The variable name was retrieved from the cache.');
    $this->assertEqual($cache_data->data['variable_value'], TRUE, 'The variable value was retrieved from the cache.');
  }

}
