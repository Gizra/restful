<?php

/**
 * @file
 * Contains RestfulAuthorizationEntityTestCase.
 */

class RestfulAuthorizationTestCase extends DrupalWebTestCase {

  /**
   * Holds the generated account.
   *
   * @var stdClass
   */
  protected $account;

  public static function getInfo() {
    return array(
      'name' => 'Authentication',
      'description' => 'Test the request authentication.',
      'group' => 'Restful',
    );
  }

  function setUp() {
    parent::setUp('restful_test');
    // Create a custom user that we'll use to identify.
    $this->account = $this->drupalCreateUser();
  }

  /**
   * Test authenticating a user.
   */
  function testAuthentication() {
    global $user;
    $handler = restful_get_restful_handler('main', 1, 5);

    // Case 1. Check that the handler has the expected authentication providers.
    $providers = array_keys($handler->authenticationManager->getArrayCopy());
    foreach ($handler->getPluginInfo('authentication types') as $provider_name) {
      $this->assertTrue(in_array($provider_name, $providers), format_string('The %name authorization type was found.', array(
        '%name' => $provider_name,
      )));
    }

    // Case 2. Test that the account from the authentication manager is the
    // logged in user.

    // We need to hijack the global user object in order to force it to be our
    // test account and make the cookie authentication provider to resolve it.
    $user = $this->account;
    $this->assertEqual($this->account->uid, $handler->getAccount()->uid, 'The authentication manager resolved the currently logged in user.');

    $cookie_provider = restful_get_authentication_handler('cookie');

    // Case 3. Test the 'cookie_auth' authentication provider.
    $this->assertEqual($this->account->uid, $cookie_provider->authenticate()->uid, 'The cookie provider resolved the currently logged in user.');

    $user = drupal_anonymous_user();
    // Case 4. Test that the 'cookie_auth' resolves the anonymous user.
    $this->assertEqual(0, $cookie_provider->authenticate()->uid, 'The cookie provider resolved the anonymous user.');

    // Put back the user object.
    $user = $this->originalUser;
  }
}
