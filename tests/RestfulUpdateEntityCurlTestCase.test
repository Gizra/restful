<?php

/**
 * @file
 * Contains RestfulUpdateEntityCurlTestCase
 */

class RestfulUpdateEntityCurlTestCase extends RestfulCurlBaseTestCase {

  /**
   * User account.
   *
   * @var stdClass
   */
  protected $account;

  public static function getInfo() {
    return array(
      'name' => 'Update entity with CURL',
      'description' => 'Test the updating of an entity using PUT and PATCH methods using CURL.',
      'group' => 'Restful',
    );
  }

  function setUp() {
    parent::setUp('restful_test');

    // Text - single.
    $field = array(
      'field_name' => 'text_single',
      'type' => 'text_long',
      'entity_types' => array('node'),
      'cardinality' => 1,
    );
    field_create_field($field);

    $instance = array(
      'field_name' => 'text_single',
      'bundle' => 'article',
      'entity_type' => 'node',
      'label' => t('Text single'),
      'settings' => array(
        'text_processing' => 0,
      ),
    );
    field_create_instance($instance);

    $this->account = $this->drupalCreateUser(array(
      'administer site configuration',
      'administer nodes',
      'edit own article content',
      'edit any article content'
    ));
    $this->drupalLogin($this->account);

    $this->httpauth_credentials = $this->account->name . ':' . $this->account->pass_raw;
  }

  /**
   * Test update an entity (PUT method).
   */
  function testUpdateEntityAsPut() {
    $label = $this->randomName();
    $new_label = $this->randomName();

    $text = $this->randomName();

    $settings = array(
      'type' => 'article',
      'title' => $label,
    );
    $settings['text_single'][LANGUAGE_NONE][0]['value'] = $text;

    $node = $this->drupalCreateNode($settings);
    $id = $node->nid;

    $request = array('label' => $new_label);

    $result = $this->httpRequest("api/v1/test_articles/$id", \RestfulInterface::PUT, $request);

    $expected_result = array(
      'id' => $id,
      'label' => $new_label,
      'self' => url('node/' . $id, array('absolute' => TRUE)),
      'text_single' => NULL,
    );

    $this->assertEqual($result['body'], drupal_json_encode($expected_result));

    // Update an entity with invalid property name.
    $request['invalid'] = 'wrong';
    $result = $this->httpRequest("api/v1/test_articles/$id", \RestfulInterface::PUT, $request);
    $this->assertEqual($result['code'], 400, 'User cannot update using PUT method an entity with invalid property name.');
  }

  /**
   * Test update an entity (PATCH method).
   */
  function testUpdateEntityAsPatch() {
    $label = $this->randomName();
    $new_label = $this->randomName();

    $text = $this->randomName();

    $settings = array(
      'type' => 'article',
      'title' => $label,
    );
    $settings['text_single'][LANGUAGE_NONE][0]['value'] = $text;

    $node = $this->drupalCreateNode($settings);
    $id = $node->nid;

    $request = array('label' => $new_label);
    $result = $this->httpRequest("api/v1/test_articles/$id", \RestfulInterface::PATCH, $request);
    $expected_result = array(
      'id' => $id,
      'label' => $new_label,
      'self' => url('node/' . $id, array('absolute' => TRUE)),
      'text_single' => $text,
    );

    $this->assertEqual($result['body'], drupal_json_encode($expected_result));

    // Update an entity with invalid property name.
    $request['invalid'] = 'wrong';
    $result = $this->httpRequest("api/v1/test_articles/$id", \RestfulInterface::PATCH, $request);
    $this->assertEqual($result['code'], 400, 'User cannot update using PATCH method an entity with invalid property name.');
  }
}
